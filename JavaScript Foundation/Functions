Q1)Write a function named 'makeTea' that takes one parameter, 'typeOfTea' and returns a string like 
"Making Green Tea" when called with "green tea".Store the result in a variable named "teaOrder".
A)function makeTea(tea){
      return `Making ${tea}`;
   }
   let teaOrder=  function makeTea("lemon tea");
   console.log(teaOrder);

Q2)Create a function named 'orderTea' that takes one parameter, 'teaType'.
Inside this function create another function named 'confirmOrder' that 
returns a message like 'Order confirmed for chai".
Call confirmOrder from within `orderTea` and return the result.
A) function orderTea(teaType){
      function confirmOrder(){
            return "Order Confirmed for chai";
      }
      return confirmOrder();
   }
   let orderConfirmation = orderTea("chai");
   console.log(orderConfirmation);

Q3)Write an arrow function named `calculateTotal` that  takes two parameters: `price` and `quantity`.
The function should return the total cost by multiplying the `price`  and `quantity`.
Store the result in a variable named `totalCost`.
A) const calculateTotal(price,quantity) => price*quantity;
   let totalCost = calculateTotal(400,50);
   
* this cannot be used in arroew function.
  const testTwo = ()=>{
       console.log(this);
  }

-------------High Order Functions and Nested Functions-------------------------
Functions are taken as parameter in loops or functions that are High Order Functions
Q4)Write a function named `processTeaOrder` that takes another function, `makeTea`, as a parameter 
and calls it with the argument "early grey".
Return the result of calling `makeTea`.
A) function makeTea(typeOfTea){
   
   }
   function processTeaOrder(teaFunction){
      return teaFunction('earl grey')
   }
   let order = processTeaOrder(makeTea)
   console.log(order);


Q5)Write a function named `createTeaMaker` that returns another function. 
The returned function should take one parameter, `teaType` and return a message like "Making green tea".
Store the returned function in a variable named `teaMaker` and call it with `green tea`.
A) function createTeaMaker(){
      return function("masala tea"){
              return `Making ${teaType}`;
      };
   }
   let teaMaker = createTeaMaker();
   console.log(teaMaker("green tea"));

--->storing a function in a variable lets you call as function to get content in function.
Eg: let teaMaker = createTeaMaker();
    console.log(teaMaker("green tea"));

                                                               






















